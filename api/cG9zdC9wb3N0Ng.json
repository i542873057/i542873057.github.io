{"title":"post6","date":"2019-03-04T07:33:29.000Z","thumbnail":"./thumbnail/post6.png","slug":"post6","tags":["ABP"],"updated":"2019-03-04T07:36:45.347Z","content":"<p>最近有一个项目需要在ABP框架中对外提供基于SOAP协议的服务，自然而然想到了用WebService和WCF，后来对比了一下还是使用WCF来进行实现。<br>在实现的过程中需要与数据库进行交互，首先想到的是直接在构造函数中进行注入，但是直接给我报了这样的这个错误</p>\n<blockquote>\n<p>The service type provided could not be loaded as a service because it does not have a default (parameter-less) constructor.<br>To fix the problem, add a default constructor to the type, or pass an instance of the type to the host.</p>\n</blockquote>\n<p>后来百度找了几篇文章，后来在<a href=\"https://blogs.msdn.microsoft.com/carlosfigueira/2011/05/31/wcf-extensibility-iinstanceprovider/\" target=\"_blank\" rel=\"noopener\">这里</a>找到了</p>\n<h2 id=\"解决方案：\">解决方案：<a href=\"post/post6#解决方案：\"></a></h2><p>在WCF中实现依赖注入得实现IInstanceProvider与IServiceBehavior这两个接口，并让实现IServiceBehavior的类成为一个Attribute（继承自Attribute），然后加在WCF服务实现类上，就可以实现WCF的构造函数依赖注入。</p>\n<h2 id=\"大致实现步骤如下：\">大致实现步骤如下：<a href=\"post/post6#大致实现步骤如下：\"></a></h2><ul>\n<li><p>首先实现<strong>IInstanceProvider</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IocInstanceProvider : IInstanceProvider</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Type _serviceType;</span><br><span class=\"line\">        IocManager _container;</span><br><span class=\"line\"></span><br><span class=\"line\">        public IocInstanceProvider(Type serviceType)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _serviceType = serviceType;</span><br><span class=\"line\">            _container = IocManager.Instance;//ABP的IOC容器</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public object GetInstance(InstanceContext instanceContext, Message message)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (_container.IsRegistered(_serviceType))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                return _container.Resolve(_serviceType);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public object GetInstance(InstanceContext instanceContext)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return GetInstance(instanceContext, null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void ReleaseInstance(InstanceContext instanceContext, object instance)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (instance is IDisposable)</span><br><span class=\"line\">                ((IDisposable)instance).Dispose();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实现<strong>IServiceBehavior</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IocServiceBehavior : System.Attribute, IServiceBehavior</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        #region IServiceBehavior Members</span><br><span class=\"line\"></span><br><span class=\"line\">        public void ApplyDispatchBehavior(ServiceDescription serviceDescription,ServiceHostBase serviceHostBase)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            foreach (ChannelDispatcher cd in serviceHostBase.ChannelDispatchers)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                foreach (EndpointDispatcher ed in cd.Endpoints)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    if (!ed.IsSystemEndpoint)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        ed.DispatchRuntime.InstanceProvider = </span><br><span class=\"line\">                            new IocInstanceProvider(serviceDescription.ServiceType);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #endregion</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在你的WCF服务上添加属性标签<br><img src=\"https://upload-images.jianshu.io/upload_images/8084902-3b8ee1e971859f6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加属性标签\"></p>\n</li>\n<li><strong><em>最后也是最容易忘的就是注册你的WCF服务到ABP的IOC容器中</em></strong><br>找到你对应的模块（Module）中的 <strong>PreInitialize</strong>方法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public override void PreInitialize()</span><br><span class=\"line\"> &#123;           </span><br><span class=\"line\">     //你对应的WCF服务</span><br><span class=\"line\">     IocManager.Register&lt;IMSSTransfer,MSSTransfer&gt;();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上就是这些，大功告成</p>\n","next":{"title":"ECharts如何只做一个区或者一个县的地图","slug":"post5"},"link":"https://i542873057.github.io/post/post6/","toc":[{"title":"解决方案：","id":"解决方案：","index":"1"},{"title":"大致实现步骤如下：","id":"大致实现步骤如下：","index":"2"}],"reward":true,"copyright":{"author":"Jianan Shao","license":"邵佳楠的个人博客","published":"2019年3月4日","link":"<a href=\"https://i542873057.github.io/post/post6/\" title=\"post6\">https://i542873057.github.io/post/post6/</a>"}}