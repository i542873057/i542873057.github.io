{"title":"ABP框架中如何集成服务总线Rebus","date":"2019-03-01T07:33:29.000Z","thumbnail":"./thumbnail/post1.png","slug":"post1","tags":["ABP"],"updated":"2019-03-04T07:34:41.291Z","content":"<p>这里主要讲一下我基于Rebus写的一个ABP框架的模块</p>\n<div class=\"article-img\"><p><img src=\"https://upload-images.jianshu.io/upload_images/8084902-cffb2b6c7e7ccdb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"目录结构\" data-zoomable></p></div>\n<p>对于Rebus网上的资料很少，其实我对于服务总线也不是很理解 。。个人理解的就是像ABP中的EventBus那样的，但是集成了一些消息队列像MSMQ，RabbitMQ等。</p>\n<blockquote>\n<p>废话不多说，下面主要讲下几个主要的文件</p>\n</blockquote>\n<div class=\"article-img\"><p><img src=\"https://upload-images.jianshu.io/upload_images/8084902-f65360c85e05fc34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"RebusRabbitMqModule\" data-zoomable></p></div>\n<p>这个呢就是ABP的模块写法，详细的可以去ABP官网看下，这里主要的代码是在这里<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var moduleConfig = IocManager.Resolve&lt;IRebusRabbitMqModuleConfig&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">if (moduleConfig.Enabled)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var rebusConfig = Configure.With(new CastleWindsorContainerAdapter(IocManager.IocContainer));</span><br><span class=\"line\"></span><br><span class=\"line\">    if (moduleConfig.LoggingConfigurer != null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //配置Rebus用哪种工具来记录日志，我这里用的Log4net</span><br><span class=\"line\">        rebusConfig.Logging(moduleConfig.LoggingConfigurer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    rebusConfig.Serialization(moduleConfig.SerializerConfigurer);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (moduleConfig.OptionsConfigurer != null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //自定义配置</span><br><span class=\"line\">        rebusConfig.Options(moduleConfig.OptionsConfigurer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    rebusConfig.Options(c =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.SetMaxParallelism(moduleConfig.MaxParallelism);</span><br><span class=\"line\">        c.SetNumberOfWorkers(moduleConfig.NumberOfWorkers);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (moduleConfig.MessageAuditingEnabled)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //消息审计队列名称</span><br><span class=\"line\">        rebusConfig.Options(o =&gt; o.EnableMessageAuditing(moduleConfig.MessageAuditingQueueName));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var mqMessageTypes = new List&lt;Type&gt;();</span><br><span class=\"line\">    //通过反射取到所有继承IHandleMessages的类进行消息订阅</span><br><span class=\"line\">    foreach (var assembly in moduleConfig.AssemblysIncludeRebusMqMessageHandlers)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        IocManager.IocContainer.AutoRegisterHandlersFromAssembly(assembly);</span><br><span class=\"line\"></span><br><span class=\"line\">        mqMessageTypes.AddRange(assembly.GetTypes()</span><br><span class=\"line\">            .Where(t =&gt; t.GetInterfaces().Any(i =&gt; i.IsGenericType &amp;&amp; i.GetGenericTypeDefinition() == typeof(IHandleMessages&lt;&gt;)))</span><br><span class=\"line\">            .SelectMany(t =&gt; t.GetInterfaces())</span><br><span class=\"line\">            .Distinct()</span><br><span class=\"line\">            .SelectMany(t =&gt; t.GetGenericArguments())</span><br><span class=\"line\">            .Distinct());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //这个就是配置使用RabbitMq进行消息通信的方法，具体的去看Rebus上的文档</span><br><span class=\"line\">    _bus = rebusConfig.Transport(c =&gt; c.UseRabbitMq(moduleConfig.ConnectString, moduleConfig.QueueName)).Start();</span><br><span class=\"line\"></span><br><span class=\"line\">    //Subscribe messages</span><br><span class=\"line\">    mqMessageTypes = mqMessageTypes.Distinct().ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">    foreach (var mqMessageType in mqMessageTypes)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _bus.Subscribe(mqMessageType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>模块的使用</p>\n</blockquote>\n<p>找到你需要引用模块的地方，如下图<br><img src=\"https://upload-images.jianshu.io/upload_images/8084902-1fb89cdc7e004829.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加依赖\"><br>然后进行对应的配置<br><img src=\"https://upload-images.jianshu.io/upload_images/8084902-943fe605e7b73d4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"里面的RabbitMqUrl是你本地RabbitMq的访问地址，比如我的是amqp-guest-guest-127-0-0-1-5672\">里面的RabbitMqUrl是你本地RabbitMq的访问地址，比如我的是amqp://guest::5672/<a href=\"post/post1#里面的RabbitMqUrl是你本地RabbitMq的访问地址，比如我的是amqp-guest-guest-127-0-0-1-5672\"></a></h3><blockquote>\n<p>接下来就是如何使用进行消息的发送和处理</p>\n</blockquote>\n<p>像其它的EventBus一样，需要先建立EventData<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       public string Name &#123; get; set; &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后是EventHander<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestHandler : EventDataConsumerHandlerBase&lt;Test&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public override Task Handle(Test message)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //这里就是写你需要对message进行怎样的处理</span><br><span class=\"line\">            return base.Handle(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后就是发布，我这里是在AppService里面进行消息的发送<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#region 构造函数</span><br><span class=\"line\">       private readonly IRepository&lt;BaseItem&gt; _baseItemRepository;</span><br><span class=\"line\">       private readonly ICacheManager _cacheManager;</span><br><span class=\"line\">       private readonly IMqMessagePublisher _iMqMessagePublisher;//依赖注入</span><br><span class=\"line\">       public BaseItemAppService(IRepository&lt;BaseItem&gt; baseItemRepository, ICacheManager cacheManager, IMqMessagePublisher iMqMessagePublisher) : base(baseItemRepository)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           this._cacheManager = cacheManager;</span><br><span class=\"line\">           this._baseItemRepository = baseItemRepository;</span><br><span class=\"line\">           _iMqMessagePublisher = iMqMessagePublisher;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       #endregion</span><br><span class=\"line\"></span><br><span class=\"line\">       #region 增删改查</span><br><span class=\"line\"></span><br><span class=\"line\">       protected override IQueryable&lt;BaseItem&gt; CreateFilteredQuery(BaseItemSearchDto input)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           //消息的发布</span><br><span class=\"line\">           _iMqMessagePublisher.Publish(new Test &#123; Name = &quot;123&quot; &#125;);</span><br><span class=\"line\">           return base.CreateFilteredQuery(input)</span><br><span class=\"line\">                   .WhereIf(input.DisplayName.IsNotNullOrEmpty(), m =&gt; m.DisplayName.Contains(input.DisplayName))</span><br><span class=\"line\">                   .WhereIf(input.TypeId != null, m =&gt; m.TypeId == input.TypeId);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">      #endregion</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以了</p>\n<p>我讲的不是很详细（我表达能力不行），大家可以去直接看我的代码，我就做了简单的封装不是很麻烦。大家可能会问我集成这个之后的业务场景是什么？我就把我用到的讲下吧：</p>\n<ul>\n<li>订单的处理：同一时间可能有很多个订单，这时可以把他发布到队列中一个一个推送进行处理，而且未标记完成的订单，就算你程序报错了，他也会自动重新推送好像默认是5次</li>\n<li>扫码入库的时候：仓库管理员扫码入库的速度是很快的，但后台程序需要一个比对操作比较耗时，这时候也可以把扫的码加入到队列中慢慢处理。</li>\n</ul>\n<p>Rebus我研究不多，有些隐藏的好东西我可能暂时没加入，希望能多提点提点。。还有服务总线是啥？</p>\n<p>最后附上几个地址：</p>\n<ul>\n<li>我的项目地址：<a href=\"https://github.com/i542873057/RebusRabbitMq.AbpExtension\" target=\"_blank\" rel=\"noopener\">点击跳转</a></li>\n<li>Rebus项目地址：<a href=\"https://github.com/rebus-org/Rebus\" target=\"_blank\" rel=\"noopener\">点击跳转</a></li>\n</ul>\n","prev":{"title":".net使用jenkins搭建自动化部署时遇到的一些问题","slug":"post4"},"next":{"title":"ECharts如何制作省份地图并在地图上显示自定义图标","slug":"post2"},"link":"https://i542873057.github.io/post/post1/","reward":true,"copyright":{"author":"Jianan Shao","license":"邵佳楠的个人博客","published":"2019年3月1日","link":"<a href=\"https://i542873057.github.io/post/post1/\" title=\"ABP框架中如何集成服务总线Rebus\">https://i542873057.github.io/post/post1/</a>"}}